{/**/}
import React, {Component} from "react";

class App extends Component {
	constructor() {
		super()
		this.state = {}
	}

	 {/*componentWillMount() lifecycle method has been deprecated*/}
	 {/*componentWillUpdate() lifecycle method has been deprecated*/}
	 {/*componentWillRecieveProps(nextProps) lifecycle method has been deprecated*/}

	{/*they were replaced by getDerivedStateFromProps() and getSnapshotBeforeUpdate() lifecycle methods*/}

	static getDerivedStateFromProps(props, state) {
		{/*returns the new, updated state based on the props*/}
	}			{/*getDerivedStateFromProps is a static method hence prepend the static keyword. It is for the rare cases that a component needs to take incoming props from its parent and set its state according to the recieved props*/}

	getSnapshotBeforeUpdate() {
		{/*creates a backup of the current way things are at a moment in time*/}
	}	

	render() {
		return (
			<div> 
				Code goes here
			</div>
		);
	} 		{/*the first lifecycle method is the render method shows what is supposed to be displayed to the world. The render method can be called many times when props or state changes affect how components display (it's like changing clothes of a person for different events)*/}
}

{/*every React component created goes through a series of phases/milestones during its time being alive in the React app (analogous to a baby being born has phases and milestones to reach)*/}

